#!/usr/bin/env bash

THEME_DIR=$HOME/.themes
RELOAD_COMMAND_FILE=$HOME/.themerl
COMMAND_ARGS="$0 $@"

theme_file=${THEME_DIR}/themes/index.yml
x_colors_file="${THEME_DIR}/cache/colors.xrdb"
#x_font_file="${THEME_DIR}/cache/font.xrdb"

mkdir -p "$(dirname "$x_colors_file")"

# TODO or exit
theme_data="$(<"$theme_file")"

json=$(yq . <<< "$theme_data")

# Defaults
VERBOSE=0
LIGHT=0
RELOAD=0
LIST=0
EDIT=0
THEME=""

die() {
  echo "$@" >&2
  exit 1
}

trace() {
  if [[ "$VERBOSE" == "1" ]]; then
    echo -e "\\033[93m-->: \\033[97m$*\\033[39m"
  fi
}

show_help() {
    cat > /dev/stdout <<EOF
${0} [ options ]

  options:
    -h | --help         show help
    -v | --verbose      verbose output
    -t | --load <name>  load the theme <name>
    -l | --list         list themes
    -v | --invert       invert theme colors
    -r | --reload       reload last selected theme
    -e | --edit         edit the theme.yml file
${0} [ -l ] [ -r ] [ -t <theme-name> ] [ -v ] [ -h ]
EOF
}

while [[ "$#" -gt 0 ]]; do
  case $1 in
    -h|--help)
      show_help
      exit 0
      ;;
    -v|--verbose)
      VERBOSE=1
      ;;
    -t|--load)
      THEME=$2
      # Fuzzy load the theme if it's not passed
      if [[ "$THEME" == "" ]] || [[ "${THEME:0:1}" == "-" ]]; then
        THEME=$("$0" -l | fzf -1)
      else
        shift
      fi
      ;;
    -l|--list)
      jq -r '.themes | keys[]' <<< "$json"
      exit 0
      ;;
    -r|--reload)
      RELOAD=1
      ;;
    -e|--edit)
      EDIT=1
      ;;
  esac
  shift
done

#
# List themes by name
# 
[[ "$LIST" == "1" ]] && {
  jq -r '.themes | keys[]' <<< "$json"
  exit 0
}

#
# Use EDITOR to open theme file
#
[[ "$EDIT" == "1" ]] && {
  [[ "$EDITOR" == "" ]] && {
    echo "No EDITOR found" 
    exit 1
  }
  echo "editing ${theme_file}..."
  eval "$EDITOR" "$theme_file"
  exit 0
}

#
# Reload config
#
if [ "$RELOAD" == "1" ] && [ -x "$RELOAD_COMMAND_FILE" ]; then
  "$RELOAD_COMMAND_FILE"
  exit $?
else
  {
    echo "#!/bin/sh"
    echo "$COMMAND_ARGS"
  } > "$RELOAD_COMMAND_FILE"
  chmod +x "$RELOAD_COMMAND_FILE"
fi

theme=$(jq .themes[\""$THEME\""] <<< "$json")

x_colors_from_shell() {
  local file=${1:?}
  while IFS='=' read -r key value _; do
    # Comment
    [[ "$key" != "" ]] && [[ "$value" == "" ]] && {
      echo ""
      echo "! ${key#\#}"
    }

    # Color and value
    [[ "$key" != "" ]] && [[ "$value" != "" ]] && {
      echo "*${key}:  ${value//\'}"
      echo "*.${key}:  ${value//\'}"

    }
  done < "$file"
}

#
# Set the wallpaper
#
set_wallpaper() {
  echo "wallpaper"
  file=${1:?}
  feh --bg-fill "$file"
}

#
# Set X colors
#
set_colors() {
  xrdb -merge "$x_colors_file"
}

deref_color() {
  local ref=${1:?}
  local color_idx=$(cut -d ':' -f 2 <<< "$ref")
  eval color='$'"color${color_idx}"
  echo "$color"
}

deref_font() {
  local ref="${1:?}"
  local defn=$(jq -r '.fonts["'"$ref"'"]' <<< "$json")
  local size=$(jq -r '.size' <<< "$defn")
  local fullname=$(jq -r '.fullname' <<< "$defn")
  local dpi=$(xrdb -query | awk '/Xft.dpi/ {print $2}')
  local size=$(echo "scale=2; $dpi / 100 * $size" | bc | cut -d '.' -f 1)
  echo "${fullname}:pixelsize=${size}px"
}

deref() {
  local ref="${1:?}"
  local kind=$(cut -d ':' -f 1 <<< "$ref")
  local ref=$(cut -d ':' -f 2 <<< "$ref")
  case "$kind" in
    "C" | "COLOR")
      deref_color "$ref"
      ;;
    "F" | "FONT")
      deref_font "$ref"
      ;;
    *)
      die "Invalid reference kind: $kind"
      ;;
  esac
}

#
# Bspwm configuration
#
set_bspwm_config() {
  local manifest="${1:?}"
  trace "set bspwm config $manifest"

  # Set configs based on values
  for key in $(jq -r '.values | keys[]' <<< "$manifest"); do
    value=$(jq -r '.values["'"$key"'"]' <<< "$manifest")
    trace "bspwm config by value - key : $key value: $value"
    bspc config "$key" "$value"
  done

  # Set configs based on references
  for key in $(jq -r '.refs | keys[]' <<< "$manifest"); do
    ref=$(jq -r '.refs["'"$key"'"]' <<< "$manifest")
    value=$(deref "$ref")
    trace "bspwm config by reference - ref : $ref key : $key value : $value"
    bspc config "$key" "$value"
  done
}

reload_xst() {
  killall -SIGUSR1 xst
}

reload_lemon() {
  pkill -SIGUSR1 display
}

load_environment_variables() {
  local manifest="${1:?}"
  eval colors_file="$(jq -r .colors.file <<< "$manifest")"
  source "$colors_file"
}

update_bspwm() {
  local manifest="${1:?}"
  trace "update bspwm : $manifest"
  set_bspwm_config "$manifest"
}

update_wallpaper() {
  local manifest="${1:?}"
  eval file=$(jq -r .file <<< "$manifest")
  options=""
  for key in $(jq -r 'keys[]' <<< "$manifest"); do
    if [ "$key" != "file" ]; then
      value=$(jq -r ".${key}" <<< "$manifest")
      options="${options} --${key} ${value}"
    fi
  done
  trace "update wallpaper : $manifest"
  feh --bg-fill $file $options
}

update_colors() {
  local manifest="${1:?}"
  trace "update colors : $manifest"
  x_colors_from_shell "$colors_file" > "$x_colors_file"
  xrdb -merge "$x_colors_file"
}

update_xrdb() {
  local manifest="${1:?}"
  trace "update xrdb : $manifest"
  # Set configs based on references
  for key in $(jq -r '.refs | keys[]' <<< "$manifest"); do
    ref=$(jq -r '.refs["'"$key"'"]' <<< "$manifest")
    value=$(deref "$ref")
    echo "${key}: $value" | xrdb -merge
  done
}

load_environment_variables "$theme"

for section in $(jq -r keys[] <<< "$theme"); do
  manifest=$(jq -r -c ."$section" <<< "$theme")
  update_"$section" "$manifest"
done

reload_xst
reload_lemon
